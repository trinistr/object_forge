module ObjectForge
  class Error < StandardError
  end
  class DSLError < Error
  end

  interface _Sequencable
    def succ: -> self
  end
  interface _Forgable
    def new: (Hash[Symbol, untyped]) -> self
  end

  VERSION: String
  DEFAULT_YARD: Forgeyard

  def self.sequence
    : (?(_Sequencable | ObjectForge::Sequence) initial) -> ObjectForge::Sequence

  def self.define
    : (ObjectForge::_Forgable forged, Symbol name) { (ObjectForge::ForgeDSL) -> void } -> ObjectForge::Forge
    | (ObjectForge::_Forgable forged, Symbol name) { [self: ObjectForge::ForgeDSL] -> void } -> ObjectForge::Forge

  def self.forge
    : (Symbol name, *Array[Symbol] traits, **Hash[Symbol, untyped] overrides) -> ObjectForge::_Forgable
end

class ObjectForge::Sequence
  def self.new
    : (?(ObjectForge::_Sequencable | instance) initial) -> instance
  
  def initialize: (ObjectForge::_Sequencable initial) -> void

  def next: -> ObjectForge::_Sequencable

  def reset: -> ObjectForge::_Sequencable
  alias rewind reset
end
  
class ObjectForge::Forgeyard
  attr_reader forges: Concurrent::Map[Symbol, ObjectForge::Forge]

  def initialize
    : () -> void

  def define
    : (Symbol name, ObjectForge::_Forgable forged) { (ObjectForge::ForgeDSL) -> void } -> ObjectForge::Forge
    | (Symbol name, ObjectForge::_Forgable forged) { [self: ObjectForge::ForgeDSL] -> void } -> ObjectForge::Forge

  def register
    : (Symbol name, ObjectForge::Forge forge) -> ObjectForge::Forge

  def forge
    : (Symbol name, *Array[Symbol] traits, **Hash[Symbol, untyped] overrides) -> ObjectForge::_Forgable
  alias build forge
  alias [] forge
end

class ObjectForge::Forge
  interface _Parameters
    def attributes: () -> Hash[Symbol, untyped]
    def traits: () -> Hash[Symbol, Hash[Symbol, untyped]]
  end

  class Parameters
    include _Parameters

    def intitialize
      : (attributes: Hash[Symbol, untyped], traits: Hash[Symbol, Hash[Symbol, untyped]]) -> void
  end

  attr_reader forged: ObjectForge::_Forgable
  attr_reader name: Symbol

  def self.define
    : (ObjectForge::_Forgable forged, ?name: Symbol?) { (ObjectForge::ForgeDSL) -> void } -> ObjectForge::Forge
    | (ObjectForge::_Forgable forged, ?name: Symbol?) { [self: ObjectForge::ForgeDSL] -> void } -> ObjectForge::Forge
  
  def initialize
    : (ObjectForge::_Forgable forged, _Parameters parameters, ?name: Symbol?) -> void
  
  def forge
    : (*Array[Symbol] traits, **Hash[Symbol, untyped] overrides) -> ObjectForge::_Forgable
    | (Array[Symbol] traits, Hash[Symbol, untyped] overrides) -> ObjectForge::_Forgable
  alias build forge
  alias [] forge

  private

  def check_traits_and_overrides
    : (Array[Symbol] traits, Hash[Symbol, untyped] overrides) -> [Array[Symbol], Hash[Symbol, untyped]]
    | ([Array[Symbol], Hash[Symbol, untyped]]) -> [Array[Symbol], Hash[Symbol, untyped]]
end

class ObjectForge::ForgeDSL < ObjectForge::UnBasicObject
  include ObjectForge::Forge::_Parameters
  attr_reader sequences: Hash[Symbol, ObjectForge::Sequence]

  @attributes: Hash[Symbol, Proc]
  @sequences: Hash[Symbol, ObjectForge::Sequence]
  @traits: Hash[Symbol, Hash[Symbol, Proc]]

  def intialize
    : () { (self) -> void } -> void
    | () { [self: self] -> void } -> void

  def freeze: -> self

  def attribute
    : (Symbol name) { -> untyped } -> Symbol
    | (Symbol name) { (ObjectForge::_Sequencable) -> untyped } -> Symbol
  alias [] attribute

  def sequence
    : (Symbol name, ?(ObjectForge::_Sequencable | ObjectForge::Sequence) initial) { (ObjectForge::_Sequencable) -> untyped } -> Symbol

  def trait
    : (Symbol name) { (self) -> void } -> Symbol

  def inspect: -> String
  
  private

  def method_missing
    : (Symbol name) { -> untyped } -> Symbol

  def respond_to_missing?
    : (Symbol name, bool include_all) -> bool

  def rand: -> (Float | Integer)
end

class ObjectForge::Crucible < ObjectForge::UnBasicObject
  @attributes: Hash[Symbol, untyped]
  @resolved_attributes: Set[Symbol]

  def initialize
    : (Hash[Symbol, untyped] attributes) -> void

  def resolve!
    : () -> Hash[Symbol, untyped]

  private

  def method_missing
    : (Symbol name) -> untyped
  alias [] method_missing

  def respond_to_missing?
    : (Symbol name, bool include_all) -> bool
end

class ObjectForge::UnBasicObject < BasicObject
  def class: -> Class
  
  def eql?: (untyped other) -> bool

  def freeze: -> self

  def frozen?: -> bool

  def hash: -> Integer

  def inspect: -> String

  def is_a?: (Module klass) -> bool

  def respond_to?: (Symbol name, bool include_private) -> bool

  def to_s: -> String

  def pretty_print: (untyped) -> void

  def pretty_print_cycle: (untyped) -> void
  
  private

  def block_given?: -> bool

  def raise: (_Exception exception, ?String message) -> void
end